/* This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/* I don't use Vim, but this should make Linguist highlight this file correctly:
   vim: syntax=c */

#include "dynasm/dasm_x86.h"

| .if X64

| .arch x64

| .define STR, rdi
| .define GR, rsi
| .define SAV, r11
| .define TMPB, r8b
| .define TMPD0, r9d
| .define TMPD1, edx
| .define TMPL0, r9
| .define TMPL1, rdx
| .define TMPLP, rbx
| .define RET, rax
| .define SP, rsp
| .define TS, rcx

| .define PTRSIZE, 8

| .macro backup
| mov SAV, STR
| .endmacro

| .macro ubackup
| .endmacro

| .macro saveregs
| push rcx
| push rsi
| push rdi
| push r11
| .endmacro

| .macro rstregs
| pop r11
| pop rdi
| pop rsi
| pop rcx
| .endmacro

| .macro longcmp, a, b
| mov64 TMPL0, b
| cmp a, TMPL0
| .endmacro

| .macro jmpaddr, a
| jmp qword a
| .endmacro

| .else

| .arch x86

| .define STR, edi
| .define GR, ebx
| .define SAV, esi
| .define TMPB, ch
| .define TMPD0, edx
| .define TMPD1, ebp
| .define TMPL0, TMPD0
| .define TMPL1, TMPD1
| .define TMPLP, ebx
| .define RET, eax
| .define SP, esp
| .define TS, RET

| .define PTRSIZE, 4

| .macro backup
| push edi
| push ebp
| push ebx
| push esi
// Add offsets of just-pushed vars to arg offsets.
| mov STR, [esp+20]
| mov GR, [esp+24]
| mov SAV, STR
| .endmacro

| .macro ubackup
| pop esi
| pop ebx
| pop ebp
| pop edi
| .endmacro

| .macro saveregs
| push eax
| .endmacro

| .macro rstregs
| pop eax
| .endmacro

| .macro longcmp, a, b
| cmp dword a, b
| .endmacro

| .macro jmpaddr, a
| jmp dword a
| .endmacro

| .endif

| .section code
| .globals lbl_
| .actionlist actions

| .define SAVPOS, [TS+PTRSIZE*saved]

| .define TP, SP

| .macro save
|  mov SAVPOS, STR
| .endmacro

| .macro rstsave
|  mov STR, SAVPOS
| .endmacro

| .macro fork, l
| sub SP, threadsz
| mov thread:TP->str, STR
| lea TMPL1, [l]
| mov thread:TP->jmp, TMPL1
|| {
||     int fork_i;
||     for (fork_i=0; fork_i<maxdepth; fork_i++) {
        | mov TMPL1, [TS+PTRSIZE*fork_i]
        | mov [TP + #thread + PTRSIZE*fork_i], TMPL1
||     }
|| }
| .endmacro

| .define RUNESZ, 4


typedef struct {
    void* str, *jmp;
} thread; // This should be PTRSIZE*2 bytes.

| .type group, rejit_group
| .type thread, thread
| .define threadsz, #thread+(maxdepth*PTRSIZE)

static void compile_prolog(dasm_State** Dst, int maxdepth) {
    | backup
    if (maxdepth) {
        | sub SP, maxdepth*PTRSIZE
    }
    | mov TS, SP
}

static void compile_epilog(dasm_State** Dst, int* pcl, int maxdepth) {
    int i, bk = *pcl;
    GROW;
    | mov SP, TS
    | mov RET, STR
    | sub RET, SAV
    if (maxdepth) {
        | add SP, maxdepth*PTRSIZE
    }
    | ubackup
    | ret
    |=>0:
    | cmp TP, TS
    | je =>bk // No more threads to run.
    | mov TMPL1, TP
    | add TP, threadsz
    | mov STR, thread:TMPL1->str
    for (i=0; i<maxdepth; i++) {
        | mov TMPL0, [TMPL1 + #thread + PTRSIZE*i]
        | mov [TS+PTRSIZE*i], TMPL0
    }
    | jmpaddr thread:TMPL1->jmp
    |=>bk:
    | mov SP, TS
    | mov RET, -1
    if (maxdepth) {
        | add SP, maxdepth*PTRSIZE
    }
    | ubackup
    | ret
}

static void compile_one(dasm_State** Dst, rejit_instruction* instr, int errpc,
                        int* pcl, int saved, int maxdepth, rejit_flags flags) {
    rejit_instruction* ia, *ib, *ic;
    rj_word magic;
    char min = 0;
    Rune* rs;
    int bk, i;
    size_t len;
    assert(sizeof(Rune) == 4);
    if (instr->kind > RJ_ISKIP) return;
    switch (instr->kind) {
    case RJ_ISKIP: printf("RJ_ISKIP was added to RJ_INULL\n"); abort();
    case RJ_IWORD:
        rs = (Rune*)instr->value;
        len = runestrlen(rs);
        i = 0;
        for (; i<len; ++i) {
            Rune r = rs[i];
            if (flags & RJ_FICASE && isalpharune(r)) {
                Rune ur = toupperrune(r), lr = tolowerrune(r);
                bk = *pcl;
                GROW;
                | mov TMPD0, [STR+i*RUNESZ]
                | cmp TMPD0, ur
                | je =>bk
                | cmp TMPD0, lr
                | jne =>errpc
                |=>bk:
            } else {
                | cmp dword [STR+i*RUNESZ],r
                | jne =>errpc
            }
        }
        if (flags & RJ_FUNICODE)
            | add STR, len
        else
            | add STR, len*RUNESZ
        break;
    case RJ_ISTAR:
    case RJ_IPLUS:
    case RJ_IOPT:
        ia = instr+1;
        bk = *pcl;
        GROW;
        GROW;
        |=>bk:
        if (instr->kind != RJ_IPLUS) {
            | fork =>bk+1
        }
        compile_one(Dst, ia, errpc, pcl, saved, maxdepth, flags);
        if (ia->kind >= RJ_IGROUP && ia->kind <= RJ_INLBEHIND) {
            // Bail on empty matches.
            | cmp STR, SAVPOS
            | je =>errpc
        }
        if (instr->kind == RJ_ISTAR) {
            | jmp =>bk
        } else if (instr->kind == RJ_IPLUS) {
            | fork =>bk+1
            | jmp =>bk
        }
        |=>bk+1:
        skip(ia);
        break;
    case RJ_IREP:
        ia = instr+1;
        for (i=0; i<instr->value; ++i) {
            compile_one(Dst, ia, errpc, pcl, saved, maxdepth, flags);
            unskip(ia);
        }
        bk = *pcl;
        GROW;
        for (i=instr->value; i<instr->value2; ++i) {
            | fork =>bk
            compile_one(Dst, ia, errpc, pcl, saved, maxdepth, flags);
            unskip(ia);
        }
        |=>bk:
        skip(ia);
        break;
    case RJ_IMSTAR:
    case RJ_IMPLUS:
        ia = instr+1;
        bk = *pcl;
        GROW;
        if (instr->kind == RJ_IMSTAR) {
            GROW;
            | jmp =>bk+1
        }
        |=>bk:
        compile_one(Dst, ia, errpc, pcl, saved, maxdepth, flags);
        skip(ia);
        if (instr->kind == RJ_IMSTAR) {
            |=>bk+1:
        }
        | fork =>bk
        break;
    case RJ_IDOT:
        if (flags & RJ_FDOTALL) {
            | mov TMPB, byte [STR]
            | test TMPB, TMPB
            | jz =>errpc
        } else {
            | movzx TMPD0, byte [STR]
            | cmp TMPD0, RUNE1
            | jg =>errpc
            | mov TMPD1, 1025
            | bt TMPD1, TMPD0
            | jb =>errpc
        }
        | add STR, RUNESZ
        break;
    case RJ_IBEGIN:
        | cmp SAV, STR
        | jne =>errpc
        break;
    case RJ_IEND:
        | cmp dword [STR], 0
        | jne =>errpc
        break;
    case RJ_IBACK:
        /* XXX: this does a byte-by-byte comparison...I wish X64 had like 60 registers. :( */
        bk = *pcl;
        GROW;
        GROW;
        GROW;
        | mov TMPL0, group:GR[instr->value].begin
        | mov TMPL1, group:GR[instr->value].end
        | sub TMPL1, TMPL0
        | jz =>bk+1
        |=>bk:
        | dec TMPL1
        | mov TMPB, [STR+TMPL1]
        | cmp TMPB, [TMPL0+TMPL1]
        | jne =>bk+1
        | test TMPL1, TMPL1
        | jnz =>bk
        | sub TMPL0, group:GR[instr->value].end
        // TMPL0 now holds -len, so str-(-len) == str+len.
        | sub STR, TMPL0
        | jmp =>bk+2
        |=>bk+1:
        | jmp =>errpc
        |=>bk+2:
        break;
    case RJ_ISET:
    case RJ_INSET:
        s = (char*)instr->value;
        bk = *pcl;
        #define SK (instr->kind == RJ_ISET ? bk : errpc)
        #define UK (instr->kind == RJ_ISET ? bk+1 : errpc)
        #define AE (instr->kind == RJ_ISET ? errpc : bk)
        GROW;
        GROW;
        | mov TMPB, [STR]
        if (instr->kind == RJ_INSET) {
            | test TMPB, TMPB
            | jz =>bk+1
        }
        while (genmagic(s, &min, &len, &magic, flags & RJ_FICASE)) {
            for (i=len+1; i<len*2+1; ++i) {
               if (s[i] == 'W') {
                    int j;
                    const char* ust = &s[i-len-1];
                    GROW;
                    | cmp TMPB, *ust
                    | jne =>*pcl-1
                    ++i;
                    for (j=1; s[i] == 'U'; ++i, ++j) {
                        | cmp byte[STR+j], ust[j]
                        | jne =>*pcl-1
                    }
                    --i;
                    | add STR, j
                    | jmp =>UK
                    |=>*pcl-1:
                }
            }
            if (magic) {
                // Guard to make sure any tested character is a single byte.
                | cmp TMPB, RUNE1
                | jg =>AE

                if (__builtin_popcountl(magic) == 1) {
                    int j=0;
                    i = magic;
                    while (i>>=1) ++j;
                    | cmp TMPB, j+min
                    | je =>SK
                } else {
                    GROW;
                    | movzx TMPD1, TMPB
                    | sub TMPD1, min
                    | js =>*pcl-1
                    | mov TMPD0, magic
                    | bt TMPD0, TMPD1
                    | jb =>SK
                    |=>*pcl-1:
                }
            }
        }
        if (instr->kind == RJ_ISET) {
            | jmp =>errpc
        }
        |=>bk:
        | inc STR
        |=>bk+1:
        break;
    case RJ_IUSET:
        | mov TMPB, [STR]
        | test TMPB, TMPB
        | jz =>errpc

        | push TMPLP
        | saveregs
        | sub SP, RUNESZ
        | .if X64
        | mov rsi, STR
        | mov rdi, SP
        | .else
        | mov TMPD0, SP
        | push STR
        | push TMPD0
        | .endif
        | mov TMPL0, chartorune
        | call TMPL0
        | mov TMPLP, RET
        | .if not X64
        | add SP, 4*2
        | .endif

        switch (instr->value) {
        case 's':
            | mov TMPL0, isspacerune
            break;
        case 'd':
            | mov TMPL0, isdigitrune
            break;
        case 'w':
            | mov TMPL0, isalnumrune
            break;
        }
        | .if X64
        | mov edi, [SP]
        | .endif
        | call TMPL0
        | xor TMPB, TMPB
        | test RET, RET
        if (instr->value == 'w') {
            GROW;
            GROW;
            | jnz =>*pcl-2
            | cmp dword [SP], '_'
            if (instr->value2) {
                | setne TMPB
            } else {
                | sete TMPB
            }
            | jmp =>*pcl-1
            |=>*pcl-2:
            | mov TMPB, !instr->value2
            |=>*pcl-1:
        } else if (instr->value2) {
            | setz TMPB
        } else {
            | setnz TMPB
        }
        | add SP, sizeof(Rune)
        | rstregs
        | add STR, TMPLP
        | pop TMPLP
        | test TMPB, TMPB
        | jz =>errpc
        break;
    case RJ_IOR:
        ia = instr+1;
        ib = (rejit_instruction*)instr->value;
        ic = (rejit_instruction*)instr->value2;
        bk = *pcl;
        GROW;
        GROW;
        | fork =>bk+1
        for (; ia != ib; ++ia) {
            compile_one(Dst, ia, errpc, pcl, saved, maxdepth, flags);
            skip(ia);
        }
        | jmp =>bk
        |=>bk+1:
        for (; ia != ic; ++ia) {
            compile_one(Dst, ia, errpc, pcl, saved, maxdepth, flags);
            skip(ia);
        }
        |=>bk:
        break;
    case RJ_ICGROUP:
    case RJ_IGROUP:
    case RJ_ILAHEAD:
    case RJ_INLAHEAD:
    case RJ_ILBEHIND:
    case RJ_INLBEHIND:
        bk = *pcl;
        GROW;
        GROW;
        if (instr->kind != RJ_INLAHEAD && instr->kind != RJ_INLBEHIND) GROW;
        ia = instr+1;
        ib = (rejit_instruction*)instr->value;
        if (instr->kind == RJ_ILBEHIND || instr->kind == RJ_INLBEHIND) {
            len = 0;
            for (; ia != ib; ++ia) {
                if (ia->len_from && ia->len_from != instr) continue;
                else if (ia->len == -1) {
                    len = -1;
                    break;
                } else len += ia->len;
            }
            ia = instr+1;
        }
        // Whether or not saves can be eliminated.
        i = (instr->kind == RJ_IGROUP || (instr->kind == RJ_ILBEHIND && len <= 0))
            && ia+1 == ib && ia->kind == RJ_IWORD;
        if (!i)
            | save
        if ((instr->kind == RJ_ILBEHIND || instr->kind == RJ_INLBEHIND) &&
            len > 0) {
            | sub STR, len
            | cmp STR, SAV
            | jl =>bk
        }
        for (; ia != ib; ++ia) {
            compile_one(Dst, ia, bk, pcl, saved+1, maxdepth, flags);
            skip(ia);
        }
        if (instr->kind == RJ_INLAHEAD || instr->kind == RJ_INLBEHIND) {
            | rstsave
            | jmp =>errpc
        } else {
            | jmp =>bk+1
        }
        |=>bk:
        if (!i)
            | rstsave
        if (instr->kind != RJ_INLAHEAD && instr->kind != RJ_INLBEHIND) {
            | jmp =>errpc
            |=>bk+1:
        }

        if (instr->kind == RJ_ILAHEAD || instr->kind == RJ_ILBEHIND)
            | rstsave

        if (instr->kind == RJ_ICGROUP) {
            | mov TMPL1, SAVPOS
            | mov group:GR[instr->value2].begin, TMPL1
            | mov group:GR[instr->value2].end, STR
        }
        break;
    default: printf("unrecognized opcode: %d\n", instr->kind); abort();
    };
}
